import { useReducer, useState } from "react";
import Head from "next/head";

export default function Home({ files }) {
	const initialState = { files, sorted: false };

	const reducer = (state, action) => {
		switch (action.type) {
			case "SORT_BY_SUBSTR": {
				action.substr;
				return {
					...state,
					files: state.files.map((f) => {
						if (
							f.fileName.toLowerCase().indexOf(action.substr.toLowerCase()) >= 0
						)
							return { ...f, shown: true };
						else return { ...f, shown: false };
					}),
					sorted: !state.sorted,
				};
			}
			case "RESET_SORTED": {
				return {
					...state,
					files: state.files.map((f) => ({ ...f, shown: true })),
					sorted: !state.sorted,
				};
			}
			default:
				return state;
		}
	};

	const [searchInput, setSearchInput] = useState("");

	const [state, dispatch] = useReducer(reducer, initialState);

	return (
		<div className="flex justify-around bg-gray-100">
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div className="flex flex-col pt-10 w-full max-w-4xl px-4 py-8 h-full">
				<div className="flex flex-row bg-white border rounded-lg overflow-hidden">
					<div className="flex flex-1 relative">
						<input
							className="flex w-full px-2 py-1 pr-10"
							placeholder=""
							type="text"
							value={searchInput}
							onChange={({ target: { value } }) => setSearchInput(value)}
						/>
						{searchInput.length > 0 && (
							<button
								onClick={() => {
									setSearchInput("");
									if (state.sorted) dispatch({ type: "RESET_SORTED" });
								}}
								className="absolute right-0 top-0 flex items-center justify-around cursor-pointer bg-white px-3 text-red-500 text-lg h-full"
							>
								Х
							</button>
						)}
					</div>

					<button
						onClick={() => {
							if (searchInput.length)
								dispatch({ type: "SORT_BY_SUBSTR", substr: searchInput });
						}}
						className={`${
							searchInput.length
								? "bg-green-500 hover:bg-green-600 cursor-pointer"
								: "cursor-not-allowed bg-gray-500"
						}  px-4 text-white transition`}
					>
						найти
					</button>
				</div>
				<div className="flex flex-row items-center justify-around py-6">
					{state.sorted && (
						<button
							onClick={() => {
								dispatch({ type: "RESET_SORTED" });
								setSearchInput("");
							}}
							className="bg-blue-200 text-white px-2 py-1 rounded"
						>
							Сбросить результаты
						</button>
					)}
				</div>
				<ul className="flex flex-col w-full">
					{state.files
						.filter((x) => x.shown)
						.map((f) => {
							return (
								<li
									className="my-1 bg-gray-200 hover:bg-gray-300 transition cursor-pointer rounded"
									key={f.filePath}
								>
									<a
										className="px-2 py-1 flex w-full h-full"
										href={f.filePath}
										target="_blank"
									>
										{f.fileName}
									</a>
								</li>
							);
						})}
				</ul>
				{state.sorted && state.files.filter((x) => x.shown).length === 0 && (
					<div className="bg-orange-200 border border-orange-600 text-orange-600 flex justify-around px-2 py-1 rounded my-3">
						Ничего не найдено
					</div>
				)}
			</div>
		</div>
	);
}

export async function getServerSideProps() {
	const files = await fetch("http://localhost:3000/files").then((res) =>
		res.json()
	);

	return {
		props: { files }, // will be passed to the page component as props
	};
}
